<!-- Deploy a utility EVM contract with a function to retrieve all token balances given a wallet address and the
-- token contract addresses.

--How your contract will be tested:
--
--`./test.js`
--
--```jsx
--const { ethers } = require("ethers");
--
--const ADDR = "‚Ä¶";   // your contract address
--const ABI = [‚Ä¶];    // your contract ABI
--
--const ADDRESS = "‚Ä¶"; // some wallet address with token balance
--const TOKENS = [    // token contract addresses
--	"‚Ä¶",
--	"‚Ä¶",
--];
--
--// you can use your own RPC provider url (no need to deploy to mainnet)
--const provider = ethers.providers.getDefaultProvider();
--
--
--const test = async () => {
--	const contract = new ethers.Contract(ADDR, ABI, provider);
--
--  const balances = await contract.getBalances(ADDRESS, tokens);
--
--	return balances;
--};
--
--test().then(console.log);
--```
--
--## Expected Output:
--
--The output should be organized as one `token amount` per object.
--
--```json
--[
--  {
--    token: "0x123d475e13aa54a43a7421d94caa4459da021c77",
--    balance: "9988887462734227" // its okay if this is typed ethers.BigNumber
--  },
--  {
--    token: "0x55f6823de9642f47e80ed4845a55aa8430cb4ec6",
--    balance: "899998285714286"
--  },
--  ‚Ä¶
--]
--```

<aside>
--üí° **Hint**: You may need to use the NPM module [truffle](https://www.trufflesuite.com/docs/truffle/overview) or [hardhat](https://hardhat.org/) to complete this task.
--
--</aside>
--
--<aside>
--‚ö†Ô∏è You can deploy your own token contracts on test networks to retrieve the balances from (mock the data), or you can use existing token contracts on either test or main networks, as long as you can deploy the balance reader contract on the same network.
--
--</aside> -->


--Below is the solution for the given problem :
--): Here's a sample Solidity contract to achieve the desired functionality:
-- Step - 1
pragma solidity ^0.8.0;

contract TokenBalance {
function getBalances(address _wallet, address[] memory _tokens)
    public view returns (bytes32[] memory, uint256[] memory) {
bytes32[] memory tokenSymbols = new bytes32;
uint256[] memory tokenBalances = new uint256;
for (uint256 i = 0; i < _tokens.length; i++) {
--Step - 2
--1. The symbol() and balanceOf() functions are part of the ERC20 standard.
--2. To test this contract, you can deploy it to a test network, get its address and ABI, and use the code in the test.
--3. js file, replacing the placeholder values with the actual values from the deployed contract.
// ERC20 interface for getting the token symbol
ERC20 erc20 = ERC20(_tokens[i]);
tokenSymbols[i] = erc20.symbol();
tokenBalances[i] = erc20.balanceOf(_wallet);
}
return (tokenSymbols, tokenBalances);
}
}